assert(1 << 1 == 2, "left shift");
assert(2 >> 1 == 1, "right shift");
assert(3 & 1 == 1, "AND");
assert(2 | 1 == 3, "OR");
assert(3 ^ 1 == 2, "XOR");
assert(1 ` 2 == 2, "series");
assert(2 + 1 == 3, "addition");
assert(2 - 1 == 1, "subtraction");
assert(2 * 2 == 4, "multiplication");
assert(2 / 2 == 1, "division");
assert(3 % 2 == 1, "modulus");
assert(1 == 1, "equality");
assert(2 > 1, "greater than");
assert(!(0 > 1), "greater than 2");
assert(1 < 2, "less than");
assert(!(2 < 1), "less than 2");
assert(1 <= 1, "less than or equal");
assert(!(2 <= 1), "less than or equal 2");
assert(0 <= 1, "less than or equal 3");
assert(1 >= 1, "greater than or equal");
assert(2 >= 1, "greater than or equal 2");
assert(!(0 >= 1), "greater than or equal 3");
assert((\-> 1)() == 1, "function call");
assert((\n -> n)(1) == 1, "function call with arg");

class Test
  method
    return "hullo";
  end
end
assert(Test().method() == "hullo", "class method");

assert((\do
  let test = Test();
  test.someProp = "hullo!";
  return test.someProp == "hullo!";
end)(), "class property assignment");

/// some code

class Base
  init(n)
    this.n = n;
  end

  getN
    return this.n;
  end

  static square(n)
    return n * n;
  end
end

class Sub < Base
  init(a, n)
    super.init(n);
    this.a = a;
  end

  doStuff
    return this.a + " " + this.getN();
  end
end

let c = Sub("hullo", 3);
println(c.doStuff());
println(Sub.square(2));